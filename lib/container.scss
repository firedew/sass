@import './lib/variables.scss';
@import './lib/breakpoints.scss';

// Container mixins

@mixin make-container($gutter: $container-padding-x) {
  --#{$css-var-prefix}gutter-x: #{$gutter};
  --#{$css-var-prefix}gutter-y: 0;
  width: 100%;
  padding-right: var(--#{$css-var-prefix}gutter-x, #{$gutter});
  padding-left: var(--#{$css-var-prefix}gutter-x, #{$gutter});
  margin-right: auto;
  margin-left: auto;
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

// Single container class with breakpoint max-widths
.fd-container,
  // 100% wide container at all breakpoints
.fd-container-fluid {
  @include make-container();
}

// Responsive containers that are 100% wide until a breakpoint
@each $breakpoint, $container-max-width in $container-max-widths {
  .fd-container-#{$breakpoint} {
    @extend .fd-container-fluid;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    %responsive-container-#{$breakpoint} {
      max-width: $container-max-width;
    }

    // Extend each breakpoint which is smaller or equal to the current breakpoint
    $extend-breakpoint: true;

    @each $name, $width in $grid-breakpoints {
      @if ($extend-breakpoint) {
        .fd-container#{breakpoint-infix($name, $grid-breakpoints)} {
          @extend %responsive-container-#{$breakpoint};
        }

        // Once the current breakpoint is reached, stop extending
        @if ($breakpoint == $name) {
          $extend-breakpoint: false;
        }
      }
    }
  }
}
